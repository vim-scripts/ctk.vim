*ctk.txt*	Plugin for compile and run your source code in Vim

ctk - Compile Toolkit					*ctk* *CTK*
Last Change: April 25, 2009

|ctk-description|	Description
|ctk-options|		Option
|ctk-usage|		Usage
|ctk-features|		Features
|ctk-contact|		Contact

For Vim version 7.0 or later.
{Vi does not have any of these features.}

==============================================================================
DESCRIPTION						*ctk-description*

ctk.vim makes you can easily compile your source code in Vim. and using
modeline to modifie your compile-flags. you can define your own hotkey to
invoke compiler, or you can just press "gc" in normal mode, means get
compiled.

the most usefull function of ctk is its modeline. you can just add a line in
your source code: >

 /* cc-gcc: flags+='-mwindows' */

then, if you use gcc to compile this code, the compile command line will be: >

 gcc source.c -Wall -mwindows -o source

and, after compile, you can run it, just press the hotkey you defined, or "gC"
in normal mode.

==============================================================================
USAGE								*ctk-usage*

								  *ctk-hotkey*

you can press hotkey to invoke compiler to compile your code, or invoke the
program generated by compiler. default hotkey is gc, you can add <count>
before it to specified which compiler you want to invoke. default run hotkey
is gC.

CTK commands						*ctk-commands*

						    *ctk-StartCTK* *:StartCTK*
						      *ctk-StopCTK* *:StopCTK*
:StartCTK
:StopCTK
		start to use CTK, or stop CTK. or you can use StartCTK to
		refresh your cinfo file after you modified it.

								*ctk-CC* *:CC*
:[N]CC {spec}
		this command is used to invoke specified compiler. [N] is your
		compiler index. you can see it in :ListCompiler command
		|:ListCompiler|. spec means how you want the compiler worked.
		it will be discussed in |ctk-spec-attr|.

							      *ctk-RUN* *:RUN*
:[N]RUN {spec}
		run the program generated by compiler. if you changed your
		source code after compiling or the index [N] or {spec} isn't
		same with ones when you invoke compiler, the compiler will be
		invoked first to compile your code again.

						    *ctk-AddFlags* *:AddFlags*
:AddFlags {flags}
		add a modeline to source code. contains all text in {flags}.
		see |ctk-modeline|.

					    *ctk-ListCompiler* *:ListCompiler*
:ListCompiler [all | current | default | {name}]
		list compilers ctk support now. all means list all compiler.
		and current means list the compiler just compiled your code.
		default means the attributes in your SetDefaultInfo sentence.
		or a specified name to list this compiler's attributes.

		NOTE: you can press <TAB> to complete all names above.

				    *ctk-EditCompilerInfo* *:EditCompilerInfo*
:EditCompilerInfo
		edit your cinfo file.

					*ctk-SetDefaultInfo* *:SetDefaultInfo*
:SetDefaultInfo {attr}="value" {attr2}=!value2! ...

		set default info for this file. add this command in your cinfo
		file if this is your default value, or it will be dropped
		after your leave Vim!

		you can use anything to replace '"' or '!' to around values.

				      *ctk-SetCompilerInfo* *:SetCompilerInfo*
:SetCompilerInfo {name} {attr}="value" {attr2}=!value2|

		same as SetDefaultInfo. but this is for setting attributes for
		specified compiler. see |ctk-set-compiler-info|


							*ctk-auto-file-rename*

when you use ctk, all new file that has the filetype ctk can recognized will
be renamed. it only happend when g:ctk_autofname isn't empty. so you can
close it by set it to '' |ctk-autofname|

there are several options to control this behavior. the renamed file will be
in a tempfolder defined by g:ctk_tempdir |ctk-tempdir|. and the output will be
changed to g:ctk_defoutput |ctk-defoutput|.


								*ctk-modeline*

you can use modeline in your source code to specified the special flags you
used. just add a line: >

 /* cc: flags+='foobar' */
<
where the cc: will be recognized as a signature of modeline. you can also use
cc-gcc: to specifie gcc-specified settings. the "flags" is a attribute name in
SetCompilerInfo or SetDefaultInfo |ctk-base-attr|. and gcc is the name of
compiler-info |:SetCompilerInfo|. you can use anything to replace "'", just
like in SetCompilerInfo.

you can use command :AddFlags to add a modeline in your file |:AddFlags|.

there are several example of modeline: >

 /* cc: output='foobar' */
 /* cc: cc=#cl# flags=## */
 /* cc-vc6: flags+='/HAs' */
 /* cc: run='!$output <data' use input data when exec program */
 -- cc: cc='ghc' haskell type comments
 {- cc: cc='ghc' -} -- haskell type comments
 // cc: flags='' C++ type comments
<

==============================================================================
FEATURES							*ctk-features*


you can define your source compiler and compile-flags in cinfo file, it
defaultly ".compiler_info" in your 'runtimepath', that is usually '~\.vim' in
unix/linux, or '$VIM\vimfiles' in windows. you can open it and edit it, just
press ':StartCTK' to refresh your new settings.

that file is combine with several autocmds |autocmd|. you can add a new
compile settings in this step: >
	-- add a new SetDefaultInfo sentence in a new section:
		" C compilers {{{1
		autocmd c SetDefaultInfo cmd='...' run='...'

	-- add a new SetCompilerInfo after it:
		autocmd c SetCompilerInfo gcc title='...'

maybe you need add a "let" sentence to define the ext-name of your source
code (e.g. "c" for c code, "cpp" for c++ code, and hs for haskell code, etc.):
>
		autocmd c let b:ft_ext = "c"
<
all autocmds are in the group "ctk_autocmds".

						    *ctk-set-compiler-info*

the SetCompilerInfo command accepts a compile name and several attribute.
there are two attributes support: simple attribute (just comtain ansi word in
attribute name) and combine attribute (specname_attrname). there are several
attr examples: >
 input='%:.' output='%:t:r' asm_output='$output.asm'
<
you can use anything that isn't appeared in attributes to replace "'", e.g: >
 input=+%:.+ input=#%:.# ...
<
use space to separate each attributes.

						       *ctk-base-attr*
some attributes are base attribute, all compiler info must define then, there
are contain "input", "output", "cmd", "run".

input and output are the input file name and output file name to pass to
compiler with command-line. if you didn't define then, they are defaultly
defined as "%:." and "%:t:r", they are means some modify with current buffer's
name: |::.||::t||::r|. you can also use other names but they can't contain
space: a space means to separate two file name.

"cmd" are used to invoke compiler. it can has some prefix: "!", "*", and ":".
"!" means this cmd is send to shell, just like you press ":!" on cmdline of
Vim |:!|, "*" means call a Vim function, you can write the function in cinfo
file or others, and ":" means exec a Vim command. if you don't add prefix, the
prefix defaultly treated as "!". i.e. cmd="foobar" is same as cmd="!foobar".

"run" are used to exec the program after compiler. it also has the same prefix
with "cmd".

you can contain tags in base attr, tags is like "$foo", that means you have a
extern attribute named "foo" or "xxx_foo", when you press :CC xxx, the
"xxx_foo" will be used, and when you simply press ":CC" or "gc", the "foo"
will be used. >
 cmd='$cc $input $flags -o $output'
>
here cmd contains four tags, there are $cc, $input, $flags and $output. so you
must define these tags in this SetCompilerInfo command. just like: >
 cc='gcc' flags='-Wall'
>
then, when you invoke compiler, the $cc will be replaced by 'gcc', and the
flags will be replaced by '-Wall'. the input and output has its default value.
and will be calculate before the compiler runs, so the command line is just
like: >
 !gcc foo.c -Wall -o foo
<
when you are edit file "foo.c".

						       *ctk-spec-attr*

you can also define spec attributes. just put specified name before attribute
name, and use a '_' to combine then. e.g: foo_bar. when you invoke compiler
with spec foo, the "foo_bar" will used, not "bar".

you can contain tags in spec-attr, they will be replaced by the simple
attribute. e.g. foo_bar='abc $bar', and bar='foofoo', then foo_bar will be
"abc foofoo".

you can't contain tags in simple attributes. it will be remained as it is.

							 *ctk-hotkey-attr*
you can define hotkey in attr, hotkey attr named "cmdmap" and "runmap", you
can define then with "modelist:key", just like cmdmap="n:<f1>", means when you
press <F1> in normal mode, the compiler will be invoked. runmap="<F2>" means
when you press <F2> in any mode, your program will run. (if it hasn't compile
yet, the compiler will be invoked before)

you can't contain tags in hotkey attr.

==============================================================================
OPTION								*ctk-options*

these are ctk's option and default value, you can change them, and put it in
your .vimrc file |.vimrc| to modified ctk.

					       *ctk-autofname* *ctk_autofname*
>
 let g:ctk_autofname = 'strftime("%Y-%m-%d")."-".idx'

<			this is used to set the auto generated fname, the
			value of this will be calculated then generated the
			new fname. set it to empty will disabled the function
			of auto rename the noname file: >

				let g:ctk_autofname = ''
<
					     *ctk-cinfo-file* *ctk_cinfo_file*
>
 let g:ctk_cinfo_file = '.compiler_info'
<			this is the default cinfo file path, based on
			'runtimepath'. it will be loaded when you start the
			ctk |StartCTK|.

					       *ctk-defoutput* *ctk_defoutput*
>
 let g:ctk_defoutput = './output'
<			this is the default output name when the file name is
			generated by CTK.

						   *ctk-ext-var* *ctk_ext_var*
>
 let g:ctk_ext_var = 'ft_ext'
<			this is the default variable name of current file
			extname. it should b:ft_ext when the g:ctk_ext_var =
			'ft_ext'

						   *ctk-tempdir* *ctk_tempdir*
>
 let g:ctk_tempdir = './noname'
<			this is the temporary folder to contain noname file.

						   *ctk-execprg* *ctk_execprg*
>
 if has('win32')
     let g:ctk_execprg = executable('vimrun') ?
 		\ 'start vimrun $exec' : 'start $exec'
 elseif has('unix') && has('gui_running')
     let g:ctk_execprg = 'xterm -e"$exec; '.
 		\ 'read -s -n1 -p''press any key to continue...''"'
 else
     let g:ctk_execprg = ''
 endif
<
			the g:ctk_execprg is the system-specified command
			template. when you run your program. this template
			will be used to build the command send to shell.
			the $exec will be replaced by the program that will
			executed.

==============================================================================
CONTACT								*ctk-contact*

if you find any bug, please contact me <weasley_wx AT qq DOT com>. and i will
very happy if you can send me some advise or new-feature :-)


vim: tw=79:ts=8:ft=help:norl:
